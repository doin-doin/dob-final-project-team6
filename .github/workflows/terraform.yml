name: Terraform


on:
  push:
    branches:
      - Set branch #push 브런치 변경

############ 이 부분 본인 설정에 맞춰 변경
env:
  AWS_REGION: ap-northeast-2
  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_USER}} #환경변수 설정
  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_USER }} #환경변수 설정

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      # Lambda 추가 시, 경로 추가해줘야 함 (아래 Form 이용하여 복사)
      - name: Install dependencies TEST
        working-directory: lambda/TEST
        run: |
          npm install
          npm install axios

  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: "production"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # AWS 리소스를 이용하기 위해서 추가
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.aws-access-key-id }}
          aws-secret-access-key: ${{ env.aws-secret-access-key }}
          aws-region: ${{ env.AWS_REGION }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd terraform
          echo "no" | terraform init

      # # Checks that all Terraform configuration files adhere to a canonical format
      # - name: Terraform Format
      #   run: terraform fmt -check
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -input=false \
            -var="AWS_ACCESS_KEY_ID=${{ env.aws-access-key-id }} " \
            -var="AWS_SECRET_ACCESS_KEY=${{ env.aws-secret-access-key }}"

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.event_name == 'push' && !(contains(github.event.head_commit.message, 'terraform destroy'))
        run: |
          cd terraform
          terraform apply \
            -auto-approve \
            -input=false \
            -var="AWS_ACCESS_KEY_ID=${{ env.aws-access-key-id }} " \
            -var="AWS_SECRET_ACCESS_KEY=${{ env.aws-secret-access-key }}"

      - name: Terraform Destroy
        if: github.event_name == 'push' && contains(github.event.head_commit.message, 'terraform destroy')
        run: |
          cd terraform
          terraform destroy \
            -auto-approve \
            -input=false \
            -var="AWS_ACCESS_KEY_ID=${{ env.aws-access-key-id }} " \
            -var="AWS_SECRET_ACCESS_KEY=${{ env.aws-secret-access-key }}"
